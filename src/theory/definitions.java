package theory;
public class definitions {
    /**
     Stream API - это набор классов и интерфейсов, упрощающих работу с коллекциями в функциональном стиле.

     Функциональный стиль программирования - это методика разработки, основанная на деление кода по функциям:
     функция имеет входящие параметры и выходящий результат. Такой подход упрощает разработку и
     повышает переиспользуемость кода.

     Stream - это последовательность элементов, по отношению к которой можно применять лямбда выражения.
     Иногда эти последовательности могут быть разбиты на части и распределены на разные потоки
     **/

    //-Чистая функция - метод в JAVA, который всегда вернёт один и тот же результат при одинаковых параметрах
    //и не повлияет на внешнюю среду (не произойдёт запись в файл, поменяет настройки и т.д)

    //-Функциональный интерфейс - это интерфейс содержащий один абстрактный метод

    //-Лямбда выражение - это реализация функционального выражения через анонимный класс

    //Функция высшего порядка - это такая функция, которая в качестве аргумента принимает другую функциую
    //и вызывает ее внутри своего тела
    //пример:Звонок оператора колл центра - функция высшего порядка
    //продажа услуг связи, соц. опрос, Продажа кредитной карты - функция низшего порядка

    //Терминальная операция - это операция, которая закрывает stream, то есть не позволяет дальше работать
    //с экземпляром stream. Смысл терминальной операции в том, чтобы показать результат работы stream
    //в определённом виде

    //Логические терминальные операции - созданы для проверки на условие всех элементов,
    //возвращающих всего булево значение

    //Класс Optional позволяет производить проверку на null возвращаемого значения. В случае обнаружения null
    //предоставляет набор методов для обработки: от выкидывания ошибки до замены на значение по умолчанию

    //Собирающие функции необходимы для получения сгруппированного результата
    //(в виде одно значения или коллекции)

    //Промежуточные операции производят действие с элементами стрима и всегда возвращают объект класса Stream
    //Для использования промежуточной операции нужна терминальная после

    //Фильтрующие операции направлены на уменьшение количества элементов по какому-либо критерию

    //Преобразующие промежуточные операции - нужны для преобразования элементов внутри стрима.
    //Не уменьшают количество стрима

}
